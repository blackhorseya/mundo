// Code generated by MockGen. DO NOT EDIT.
// Source: wordbook.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	agg "github.com/blackhorseya/mundo/entity/domain/management/agg"
	contextx "github.com/blackhorseya/mundo/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIWordbookRepo is a mock of IWordbookRepo interface.
type MockIWordbookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWordbookRepoMockRecorder
}

// MockIWordbookRepoMockRecorder is the mock recorder for MockIWordbookRepo.
type MockIWordbookRepoMockRecorder struct {
	mock *MockIWordbookRepo
}

// NewMockIWordbookRepo creates a new mock instance.
func NewMockIWordbookRepo(ctrl *gomock.Controller) *MockIWordbookRepo {
	mock := &MockIWordbookRepo{ctrl: ctrl}
	mock.recorder = &MockIWordbookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWordbookRepo) EXPECT() *MockIWordbookRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIWordbookRepo) Create(ctx contextx.Contextx, book *agg.Wordbook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIWordbookRepoMockRecorder) Create(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIWordbookRepo)(nil).Create), ctx, book)
}

// GetByName mocks base method.
func (m *MockIWordbookRepo) GetByName(ctx contextx.Contextx, name string) (*agg.Wordbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*agg.Wordbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIWordbookRepoMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIWordbookRepo)(nil).GetByName), ctx, name)
}
